schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Booking
  @join__owner(graph: BOOKINGS)
  @join__type(graph: BOOKINGS, key: "id")
{
  desktopId: String @join__field(graph: BOOKINGS)
  endDate: String @join__field(graph: BOOKINGS)
  id: ID! @join__field(graph: BOOKINGS)
  startDate: String @join__field(graph: BOOKINGS)
  userId: String @join__field(graph: BOOKINGS)
}

type Desktop
  @join__owner(graph: DESKTOPS)
  @join__type(graph: DESKTOPS, key: "id")
{
  id: ID! @join__field(graph: DESKTOPS)
  location: String @join__field(graph: DESKTOPS)
  name: String @join__field(graph: DESKTOPS)
}

type Mutation {
  addBooking(desktopId: String, endDate: String!, startDate: String!, userId: String): Booking @join__field(graph: BOOKINGS)
  addDesktop(location: String!, name: String!): Desktop @join__field(graph: DESKTOPS)
  addUser(email: String!, username: String!): User @join__field(graph: USERS)
}

type Query {
  booking(id: ID!): Booking @join__field(graph: BOOKINGS)
  bookings: [Booking] @join__field(graph: BOOKINGS)
  desktop(id: ID!): Desktop @join__field(graph: DESKTOPS)
  desktops: [Desktop] @join__field(graph: DESKTOPS)
  user(id: ID!): User @join__field(graph: USERS)
  users: [User] @join__field(graph: USERS)
}

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "id")
{
  email: String @join__field(graph: USERS)
  id: ID! @join__field(graph: USERS)
  username: String @join__field(graph: USERS)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  BOOKINGS @join__graph(name: "bookings" url: "http://localhost:4003")
  DESKTOPS @join__graph(name: "desktops" url: "http://localhost:4002")
  USERS @join__graph(name: "users" url: "http://localhost:4001")
}
